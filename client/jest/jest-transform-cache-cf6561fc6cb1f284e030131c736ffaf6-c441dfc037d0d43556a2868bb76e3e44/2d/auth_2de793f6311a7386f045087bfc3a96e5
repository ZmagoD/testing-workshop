/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var cov_2nps5uc8zz = function () {var path = '/Users/zmagodevetak/Desktop/react/testing-workshop/client/src/reducers/auth.js',hash = '9f5e6bc5d4f5f3ccd6dea2117f4c33793d63266e',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/Users/zmagodevetak/Desktop/react/testing-workshop/client/src/reducers/auth.js', statementMap: { '0': { start: { line: 1, column: 21 }, end: { line: 1, column: 54 } }, '1': { start: { line: 3, column: 2 }, end: { line: 22, column: 3 } }, '2': { start: { line: 6, column: 6 }, end: { line: 10, column: 7 } }, '3': { start: { line: 13, column: 6 }, end: { line: 13, column: 30 } }, '4': { start: { line: 15, column: 6 }, end: { line: 19, column: 7 } }, '5': { start: { line: 16, column: 8 }, end: { line: 16, column: 43 } }, '6': { start: { line: 18, column: 8 }, end: { line: 18, column: 20 } }, '7': { start: { line: 21, column: 6 }, end: { line: 21, column: 18 } } }, fnMap: { '0': { name: '(anonymous_0)', decl: { start: { line: 2, column: 15 }, end: { line: 2, column: 16 } }, loc: { start: { line: 2, column: 49 }, end: { line: 23, column: 1 } }, line: 2 } }, branchMap: { '0': { loc: { start: { line: 2, column: 16 }, end: { line: 2, column: 36 } }, type: 'default-arg', locations: [{ start: { line: 2, column: 24 }, end: { line: 2, column: 36 } }], line: 2 }, '1': { loc: { start: { line: 3, column: 2 }, end: { line: 22, column: 3 } }, type: 'switch', locations: [{ start: { line: 4, column: 4 }, end: { line: 4, column: 17 } }, { start: { line: 5, column: 4 }, end: { line: 10, column: 7 } }, { start: { line: 11, column: 4 }, end: { line: 11, column: 31 } }, { start: { line: 12, column: 4 }, end: { line: 13, column: 30 } }, { start: { line: 14, column: 4 }, end: { line: 19, column: 7 } }, { start: { line: 20, column: 4 }, end: { line: 21, column: 18 } }], line: 3 }, '2': { loc: { start: { line: 9, column: 16 }, end: { line: 9, column: 59 } }, type: 'cond-expr', locations: [{ start: { line: 9, column: 31 }, end: { line: 9, column: 52 } }, { start: { line: 9, column: 55 }, end: { line: 9, column: 59 } }], line: 9 }, '3': { loc: { start: { line: 15, column: 6 }, end: { line: 19, column: 7 } }, type: 'if', locations: [{ start: { line: 15, column: 6 }, end: { line: 19, column: 7 } }, { start: { line: 15, column: 6 }, end: { line: 19, column: 7 } }], line: 15 }, '4': { loc: { start: { line: 15, column: 10 }, end: { line: 15, column: 69 } }, type: 'binary-expr', locations: [{ start: { line: 15, column: 10 }, end: { line: 15, column: 36 } }, { start: { line: 15, column: 40 }, end: { line: 15, column: 69 } }], line: 15 } }, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0 }, f: { '0': 0 }, b: { '0': [0], '1': [0, 0, 0, 0, 0, 0], '2': [0, 0], '3': [0, 0], '4': [0, 0] }, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();const defaultState = /* istanbul ignore next */(++cov_2nps5uc8zz.s[0], { inProgress: false, errors: null }); /* istanbul ignore next */exports.default =
(state = /* istanbul ignore next */(++cov_2nps5uc8zz.b[0][0], defaultState), action) => {/* istanbul ignore next */++cov_2nps5uc8zz.f[0];++cov_2nps5uc8zz.s[1];
  switch (action.type) {
    case 'LOGIN': /* istanbul ignore next */++cov_2nps5uc8zz.b[1][0];
    case 'REGISTER': /* istanbul ignore next */++cov_2nps5uc8zz.b[1][1];++cov_2nps5uc8zz.s[2];
      return (/* istanbul ignore next */Object.assign({},
        state, {
          inProgress: false,
          errors: action.error ? /* istanbul ignore next */(++cov_2nps5uc8zz.b[2][0], action.payload.errors) : /* istanbul ignore next */(++cov_2nps5uc8zz.b[2][1], null) }));

    case 'LOGIN_PAGE_UNLOADED': /* istanbul ignore next */++cov_2nps5uc8zz.b[1][2];
    case 'REGISTER_PAGE_UNLOADED': /* istanbul ignore next */++cov_2nps5uc8zz.b[1][3];++cov_2nps5uc8zz.s[3];
      return (/* istanbul ignore next */Object.assign({}, defaultState));
    case 'ASYNC_START': /* istanbul ignore next */++cov_2nps5uc8zz.b[1][4];++cov_2nps5uc8zz.s[4];
      if ( /* istanbul ignore next */(++cov_2nps5uc8zz.b[4][0], action.subtype === 'LOGIN') || /* istanbul ignore next */(++cov_2nps5uc8zz.b[4][1], action.subtype === 'REGISTER')) {/* istanbul ignore next */++cov_2nps5uc8zz.b[3][0];++cov_2nps5uc8zz.s[5];
        return (/* istanbul ignore next */Object.assign({}, state, { inProgress: true }));
      } else {/* istanbul ignore next */++cov_2nps5uc8zz.b[3][1];++cov_2nps5uc8zz.s[6];
        return state;
      }
    default: /* istanbul ignore next */++cov_2nps5uc8zz.b[1][5];++cov_2nps5uc8zz.s[7];
      return state;}

};