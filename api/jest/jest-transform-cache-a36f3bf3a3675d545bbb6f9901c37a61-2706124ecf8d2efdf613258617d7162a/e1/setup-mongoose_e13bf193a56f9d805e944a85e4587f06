/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var cov_2mlqyhp8h8 = function () {var path = '/Users/zmagodevetak/Desktop/react/testing-workshop/api/src/config/setup-mongoose.js',hash = '3d8cdb3b030010346544cee9542d65c5a20c5e36',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/Users/zmagodevetak/Desktop/react/testing-workshop/api/src/config/setup-mongoose.js', statementMap: { '0': { start: { line: 4, column: 0 }, end: { line: 4, column: 26 } }, '1': { start: { line: 9, column: 2 }, end: { line: 11, column: 3 } }, '2': { start: { line: 10, column: 4 }, end: { line: 10, column: 31 } }, '3': { start: { line: 12, column: 2 }, end: { line: 16, column: 3 } }, '4': { start: { line: 13, column: 4 }, end: { line: 13, column: 42 } }, '5': { start: { line: 15, column: 4 }, end: { line: 15, column: 48 } }, '6': { start: { line: 18, column: 2 }, end: { line: 20, column: 3 } }, '7': { start: { line: 19, column: 4 }, end: { line: 19, column: 31 } }, '8': { start: { line: 24, column: 2 }, end: { line: 30, column: 4 } }, '9': { start: { line: 25, column: 4 }, end: { line: 28, column: 5 } }, '10': { start: { line: 29, column: 4 }, end: { line: 29, column: 32 } } }, fnMap: { '0': { name: 'setupMongoose', decl: { start: { line: 8, column: 15 }, end: { line: 8, column: 28 } }, loc: { start: { line: 8, column: 31 }, end: { line: 21, column: 1 } } }, '1': { name: 'cleanup', decl: { start: { line: 18, column: 18 }, end: { line: 18, column: 25 } }, loc: { start: { line: 18, column: 28 }, end: { line: 20, column: 3 } } }, '2': { name: 'connect', decl: { start: { line: 23, column: 9 }, end: { line: 23, column: 16 } }, loc: { start: { line: 23, column: 22 }, end: { line: 31, column: 1 } } }, '3': { name: '(anonymous_3)', decl: { start: { line: 24, column: 37 }, end: { line: 24, column: 38 } }, loc: { start: { line: 24, column: 46 }, end: { line: 30, column: 3 } } } }, branchMap: { '0': { loc: { start: { line: 9, column: 2 }, end: { line: 11, column: 3 } }, type: 'if', locations: [{ start: { line: 9, column: 2 }, end: { line: 11, column: 3 } }, { start: { line: 9, column: 2 }, end: { line: 11, column: 3 } }] }, '1': { loc: { start: { line: 12, column: 2 }, end: { line: 16, column: 3 } }, type: 'if', locations: [{ start: { line: 12, column: 2 }, end: { line: 16, column: 3 } }, { start: { line: 12, column: 2 }, end: { line: 16, column: 3 } }] } }, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0 }, f: { '0': 0, '1': 0, '2': 0, '3': 0 }, b: { '0': [0, 0], '1': [0, 0] }, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();let setupMongoose = (() => {var _ref = _asyncToGenerator(






  function* () {/* istanbul ignore next */++cov_2mlqyhp8h8.f[0];++cov_2mlqyhp8h8.s[1];
    if ('MONGODB_DEBUG' in process.env) {/* istanbul ignore next */++cov_2mlqyhp8h8.b[0][0];++cov_2mlqyhp8h8.s[2];
      /* istanbul ignore next */_mongoose2.default.set('debug', true);
    } else /* istanbul ignore next */{++cov_2mlqyhp8h8.b[0][1];}++cov_2mlqyhp8h8.s[3];
    if (process.env.MONGODB_URI) {/* istanbul ignore next */++cov_2mlqyhp8h8.b[1][0];++cov_2mlqyhp8h8.s[4];
      yield connect(process.env.MONGODB_URI);
    } else {/* istanbul ignore next */++cov_2mlqyhp8h8.b[1][1];++cov_2mlqyhp8h8.s[5];
      yield connect('mongodb://localhost/conduit');
    } /* istanbul ignore next */++cov_2mlqyhp8h8.s[6];

    return function cleanup() {/* istanbul ignore next */++cov_2mlqyhp8h8.f[1];++cov_2mlqyhp8h8.s[7];
      /* istanbul ignore next */_mongoose2.default.connection.close();
    };
  });return function setupMongoose() {return _ref.apply(this, arguments);};})();var /* istanbul ignore next */_mongoose = require('mongoose'); /* istanbul ignore next */var _mongoose2 = _interopRequireDefault(_mongoose);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};} // use native promises... like... always ðŸ™ƒ
++cov_2mlqyhp8h8.s[0]; /* istanbul ignore next */_mongoose2.default.Promise = Promise; /* istanbul ignore next */exports.default = setupMongoose;
function connect(uri) {/* istanbul ignore next */++cov_2mlqyhp8h8.f[2];++cov_2mlqyhp8h8.s[8];
  return (/* istanbul ignore next */_mongoose2.default.connect(uri).catch(error => {/* istanbul ignore next */++cov_2mlqyhp8h8.f[3];++cov_2mlqyhp8h8.s[9];
      console.error(
      'There was a problem connecting mongoose to mongodb',
      'Do you have mongodb running?'); /* istanbul ignore next */++cov_2mlqyhp8h8.s[10];

      return Promise.reject(error);
    }));
}