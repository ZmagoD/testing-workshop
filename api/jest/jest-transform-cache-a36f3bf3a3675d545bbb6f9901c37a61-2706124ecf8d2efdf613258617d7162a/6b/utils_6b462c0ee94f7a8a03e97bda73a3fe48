'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.getArticleConstructor = exports.generateArticle = exports.getUserConstructor = exports.generateUser = undefined;var _mongoose = require('mongoose');var _mongoose2 = _interopRequireDefault(_mongoose);
var _lodash = require('lodash');var _lodash2 = _interopRequireDefault(_lodash);
var _article = require('../../article');var _article2 = _interopRequireDefault(_article);
var _user = require('../../user');var _user2 = _interopRequireDefault(_user);
var _user3 = require('../../../../../other/generate/user');var _user4 = _interopRequireDefault(_user3);
var _article3 = require('../../../../../other/generate/article');var _article4 = _interopRequireDefault(_article3);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}exports.


generateUser = generateUser;exports.
getUserConstructor = getUserConstructor;exports.
generateArticle = generateArticle;exports.
getArticleConstructor = getArticleConstructor;


function generateUser(overrides) {
  const User = getUserConstructor();
  const user = new User();
  const mockOverrides = {
    save: jest.fn() };

  Object.assign(user, (0, _user4.default)(overrides), mockOverrides);
  return user;
}

function getUserConstructor() {
  return _mongoose2.default.model(_lodash2.default.uniqueId('User'), (0, _user2.default)());
}

function generateArticle(overrides) {
  const MockUserModel = {
    count: jest.fn(() => Promise.resolve(MockUserModel._mockData.count)),
    _mockData: {
      count: 11 } };


  const Article = getArticleConstructor(MockUserModel);var _generateUser =
  generateUser();const author = _generateUser.user;
  const article = new Article();
  const mockOverrides = {
    save: jest.fn() };

  Object.assign(article, (0, _article4.default)(author, overrides), mockOverrides);
  return { article, MockUserModel };
}

function getArticleConstructor(MockUserModel) {
  return _mongoose2.default.model(_lodash2.default.uniqueId('Article'), (0, _article2.default)(MockUserModel));
}