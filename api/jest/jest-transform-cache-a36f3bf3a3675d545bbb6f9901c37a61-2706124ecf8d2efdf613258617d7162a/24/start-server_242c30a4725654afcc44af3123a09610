/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var cov_1a8usmab5 = function () {var path = '/Users/zmagodevetak/Desktop/react/testing-workshop/api/src/start-server.js',hash = '3c6a7e4711499278a93f42b79859e5b47a6ac79f',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/Users/zmagodevetak/Desktop/react/testing-workshop/api/src/start-server.js', statementMap: { '0': { start: { line: 14, column: 21 }, end: { line: 14, column: 58 } }, '1': { start: { line: 20, column: 14 }, end: { line: 20, column: 23 } }, '2': { start: { line: 22, column: 2 }, end: { line: 22, column: 17 } }, '3': { start: { line: 25, column: 2 }, end: { line: 27, column: 3 } }, '4': { start: { line: 26, column: 4 }, end: { line: 26, column: 26 } }, '5': { start: { line: 28, column: 2 }, end: { line: 28, column: 51 } }, '6': { start: { line: 29, column: 2 }, end: { line: 29, column: 28 } }, '7': { start: { line: 31, column: 2 }, end: { line: 31, column: 27 } }, '8': { start: { line: 32, column: 2 }, end: { line: 32, column: 48 } }, '9': { start: { line: 34, column: 2 }, end: { line: 41, column: 3 } }, '10': { start: { line: 43, column: 2 }, end: { line: 45, column: 3 } }, '11': { start: { line: 44, column: 4 }, end: { line: 44, column: 27 } }, '12': { start: { line: 47, column: 26 }, end: { line: 47, column: 47 } }, '13': { start: { line: 48, column: 2 }, end: { line: 48, column: 15 } }, '14': { start: { line: 49, column: 2 }, end: { line: 49, column: 17 } }, '15': { start: { line: 51, column: 2 }, end: { line: 51, column: 22 } }, '16': { start: { line: 54, column: 2 }, end: { line: 58, column: 4 } }, '17': { start: { line: 55, column: 16 }, end: { line: 55, column: 38 } }, '18': { start: { line: 56, column: 4 }, end: { line: 56, column: 20 } }, '19': { start: { line: 57, column: 4 }, end: { line: 57, column: 13 } }, '20': { start: { line: 64, column: 2 }, end: { line: 77, column: 3 } }, '21': { start: { line: 65, column: 4 }, end: { line: 76, column: 6 } }, '22': { start: { line: 66, column: 6 }, end: { line: 66, column: 29 } }, '23': { start: { line: 68, column: 6 }, end: { line: 68, column: 35 } }, '24': { start: { line: 70, column: 6 }, end: { line: 75, column: 8 } }, '25': { start: { line: 81, column: 2 }, end: { line: 92, column: 4 } }, '26': { start: { line: 82, column: 4 }, end: { line: 82, column: 27 } }, '27': { start: { line: 84, column: 4 }, end: { line: 84, column: 33 } }, '28': { start: { line: 86, column: 4 }, end: { line: 91, column: 6 } }, '29': { start: { line: 95, column: 2 }, end: { line: 103, column: 4 } }, '30': { start: { line: 96, column: 19 }, end: { line: 102, column: 6 } }, '31': { start: { line: 97, column: 6 }, end: { line: 97, column: 63 } }, '32': { start: { line: 98, column: 6 }, end: { line: 100, column: 8 } }, '33': { start: { line: 99, column: 8 }, end: { line: 99, column: 25 } }, '34': { start: { line: 101, column: 6 }, end: { line: 101, column: 21 } } }, fnMap: { '0': { name: 'start', decl: { start: { line: 18, column: 15 }, end: { line: 18, column: 20 } }, loc: { start: { line: 18, column: 23 }, end: { line: 104, column: 1 } } }, '1': { name: '(anonymous_1)', decl: { start: { line: 54, column: 10 }, end: { line: 54, column: 11 } }, loc: { start: { line: 54, column: 30 }, end: { line: 58, column: 3 } } }, '2': { name: '(anonymous_2)', decl: { start: { line: 65, column: 12 }, end: { line: 65, column: 13 } }, loc: { start: { line: 65, column: 31 }, end: { line: 76, column: 5 } } }, '3': { name: '(anonymous_3)', decl: { start: { line: 81, column: 10 }, end: { line: 81, column: 11 } }, loc: { start: { line: 81, column: 29 }, end: { line: 92, column: 3 } } }, '4': { name: '(anonymous_4)', decl: { start: { line: 95, column: 21 }, end: { line: 95, column: 22 } }, loc: { start: { line: 95, column: 32 }, end: { line: 103, column: 3 } } }, '5': { name: '(anonymous_5)', decl: { start: { line: 96, column: 56 }, end: { line: 96, column: 57 } }, loc: { start: { line: 96, column: 62 }, end: { line: 102, column: 5 } } }, '6': { name: '(anonymous_6)', decl: { start: { line: 98, column: 25 }, end: { line: 98, column: 26 } }, loc: { start: { line: 98, column: 31 }, end: { line: 100, column: 7 } } } }, branchMap: { '0': { loc: { start: { line: 25, column: 2 }, end: { line: 27, column: 3 } }, type: 'if', locations: [{ start: { line: 25, column: 2 }, end: { line: 27, column: 3 } }, { start: { line: 25, column: 2 }, end: { line: 27, column: 3 } }] }, '1': { loc: { start: { line: 43, column: 2 }, end: { line: 45, column: 3 } }, type: 'if', locations: [{ start: { line: 43, column: 2 }, end: { line: 45, column: 3 } }, { start: { line: 43, column: 2 }, end: { line: 45, column: 3 } }] }, '2': { loc: { start: { line: 64, column: 2 }, end: { line: 77, column: 3 } }, type: 'if', locations: [{ start: { line: 64, column: 2 }, end: { line: 77, column: 3 } }, { start: { line: 64, column: 2 }, end: { line: 77, column: 3 } }] }, '3': { loc: { start: { line: 68, column: 17 }, end: { line: 68, column: 34 } }, type: 'binary-expr', locations: [{ start: { line: 68, column: 17 }, end: { line: 68, column: 27 } }, { start: { line: 68, column: 31 }, end: { line: 68, column: 34 } }] }, '4': { loc: { start: { line: 84, column: 15 }, end: { line: 84, column: 32 } }, type: 'binary-expr', locations: [{ start: { line: 84, column: 15 }, end: { line: 84, column: 25 } }, { start: { line: 84, column: 29 }, end: { line: 84, column: 32 } }] }, '5': { loc: { start: { line: 96, column: 30 }, end: { line: 96, column: 54 } }, type: 'binary-expr', locations: [{ start: { line: 96, column: 30 }, end: { line: 96, column: 46 } }, { start: { line: 96, column: 50 }, end: { line: 96, column: 54 } }] } }, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0, '13': 0, '14': 0, '15': 0, '16': 0, '17': 0, '18': 0, '19': 0, '20': 0, '21': 0, '22': 0, '23': 0, '24': 0, '25': 0, '26': 0, '27': 0, '28': 0, '29': 0, '30': 0, '31': 0, '32': 0, '33': 0, '34': 0 }, f: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0 }, b: { '0': [0, 0], '1': [0, 0], '2': [0, 0], '3': [0, 0], '4': [0, 0], '5': [0, 0] }, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();let start = (() => {var _ref = _asyncToGenerator(
















  function* () {/* istanbul ignore next */++cov_1a8usmab5.f[0];
    // Create global app object
    const app = /* istanbul ignore next */(++cov_1a8usmab5.s[1], /* istanbul ignore next */(0, _express2.default)()); /* istanbul ignore next */++cov_1a8usmab5.s[2];

    app.use( /* istanbul ignore next */(0, _cors2.default)());

    // Normal express config defaults
    /* istanbul ignore next */++cov_1a8usmab5.s[3];if ( /* istanbul ignore next */_loglevel2.default.getLevel() < 3) {/* istanbul ignore next */++cov_1a8usmab5.b[0][0];++cov_1a8usmab5.s[4];
      app.use( /* istanbul ignore next */(0, _morgan2.default)('dev'));
    } else /* istanbul ignore next */{++cov_1a8usmab5.b[0][1];}++cov_1a8usmab5.s[5];
    app.use( /* istanbul ignore next */_bodyParser2.default.urlencoded({ extended: false })); /* istanbul ignore next */++cov_1a8usmab5.s[6];
    app.use( /* istanbul ignore next */_bodyParser2.default.json()); /* istanbul ignore next */++cov_1a8usmab5.s[7];

    app.use( /* istanbul ignore next */(0, _methodOverride2.default)()); /* istanbul ignore next */++cov_1a8usmab5.s[8];
    app.use( /* istanbul ignore next */_express2.default.static(`${__dirname}/public`)); /* istanbul ignore next */++cov_1a8usmab5.s[9];

    app.use(
    /* istanbul ignore next */(0, _expressSession2.default)({
      secret: 'conduit',
      cookie: { maxAge: 60000 },
      resave: false,
      saveUninitialized: false })); /* istanbul ignore next */++cov_1a8usmab5.s[10];



    if (!isProduction) {/* istanbul ignore next */++cov_1a8usmab5.b[1][0];++cov_1a8usmab5.s[11];
      app.use( /* istanbul ignore next */(0, _errorhandler2.default)());
    } else /* istanbul ignore next */{++cov_1a8usmab5.b[1][1];}

    const cleanupMongoose = /* istanbul ignore next */(++cov_1a8usmab5.s[12], yield (/* istanbul ignore next */(0, _setupMongoose2.default)())); /* istanbul ignore next */++cov_1a8usmab5.s[13];
    /* istanbul ignore next */(0, _models2.default)(); /* istanbul ignore next */++cov_1a8usmab5.s[14];
    /* istanbul ignore next */(0, _setupPassport2.default)(); /* istanbul ignore next */++cov_1a8usmab5.s[15];

    app.use( /* istanbul ignore next */(0, _routes2.default)());

    /// catch 404 and forward to error handler
    /* istanbul ignore next */++cov_1a8usmab5.s[16];app.use(function (req, res, next) {/* istanbul ignore next */++cov_1a8usmab5.f[1];
      const err = /* istanbul ignore next */(++cov_1a8usmab5.s[17], new Error('Not Found')); /* istanbul ignore next */++cov_1a8usmab5.s[18];
      err.status = 404; /* istanbul ignore next */++cov_1a8usmab5.s[19];
      next(err);
    });

    /// error handlers

    // development error handler
    // will print stacktrace
    /* istanbul ignore next */++cov_1a8usmab5.s[20];if (!isProduction) {/* istanbul ignore next */++cov_1a8usmab5.b[2][0];++cov_1a8usmab5.s[21];
      app.use(function (err, req, res) {/* istanbul ignore next */++cov_1a8usmab5.f[2];++cov_1a8usmab5.s[22];
        /* istanbul ignore next */_loglevel2.default.error(err.stack); /* istanbul ignore next */++cov_1a8usmab5.s[23];

        res.status( /* istanbul ignore next */(++cov_1a8usmab5.b[3][0], err.status) || /* istanbul ignore next */(++cov_1a8usmab5.b[3][1], 500)); /* istanbul ignore next */++cov_1a8usmab5.s[24];

        res.json({
          errors: {
            message: err.message,
            error: err } });


      });
    } else /* istanbul ignore next */{++cov_1a8usmab5.b[2][1];}

    // production error handler
    // no stacktraces leaked to user
    ++cov_1a8usmab5.s[25];app.use(function (err, req, res) {/* istanbul ignore next */++cov_1a8usmab5.f[3];++cov_1a8usmab5.s[26];
      /* istanbul ignore next */_loglevel2.default.error(err.stack); /* istanbul ignore next */++cov_1a8usmab5.s[27];

      res.status( /* istanbul ignore next */(++cov_1a8usmab5.b[4][0], err.status) || /* istanbul ignore next */(++cov_1a8usmab5.b[4][1], 500)); /* istanbul ignore next */++cov_1a8usmab5.s[28];

      res.json({
        errors: {
          message: err.message,
          error: {} } });


    });

    // finally, let's start our server...
    /* istanbul ignore next */++cov_1a8usmab5.s[29];return new Promise(function (resolve) {/* istanbul ignore next */++cov_1a8usmab5.f[4];
      const server = /* istanbul ignore next */(++cov_1a8usmab5.s[30], app.listen( /* istanbul ignore next */(++cov_1a8usmab5.b[5][0], process.env.PORT) || /* istanbul ignore next */(++cov_1a8usmab5.b[5][1], 3000), function () {/* istanbul ignore next */++cov_1a8usmab5.f[5];++cov_1a8usmab5.s[31];
        /* istanbul ignore next */_loglevel2.default.info(`Listening on port ${server.address().port}`); /* istanbul ignore next */++cov_1a8usmab5.s[32];
        server.on('close', function () {/* istanbul ignore next */++cov_1a8usmab5.f[6];++cov_1a8usmab5.s[33];
          cleanupMongoose();
        }); /* istanbul ignore next */++cov_1a8usmab5.s[34];
        resolve(server);
      }));
    });
  });return function start() {return _ref.apply(this, arguments);};})();var /* istanbul ignore next */_express = require('express'); /* istanbul ignore next */var _express2 = _interopRequireDefault(_express);var /* istanbul ignore next */_bodyParser = require('body-parser'); /* istanbul ignore next */var _bodyParser2 = _interopRequireDefault(_bodyParser);var /* istanbul ignore next */_expressSession = require('express-session'); /* istanbul ignore next */var _expressSession2 = _interopRequireDefault(_expressSession);var /* istanbul ignore next */_cors = require('cors'); /* istanbul ignore next */var _cors2 = _interopRequireDefault(_cors);var /* istanbul ignore next */_errorhandler = require('errorhandler'); /* istanbul ignore next */var _errorhandler2 = _interopRequireDefault(_errorhandler);var /* istanbul ignore next */_morgan = require('morgan'); /* istanbul ignore next */var _morgan2 = _interopRequireDefault(_morgan);var /* istanbul ignore next */_methodOverride = require('method-override'); /* istanbul ignore next */var _methodOverride2 = _interopRequireDefault(_methodOverride);var /* istanbul ignore next */_loglevel = require('loglevel'); /* istanbul ignore next */var _loglevel2 = _interopRequireDefault(_loglevel);var /* istanbul ignore next */_setupMongoose = require('./config/setup-mongoose'); /* istanbul ignore next */var _setupMongoose2 = _interopRequireDefault(_setupMongoose);var /* istanbul ignore next */_setupPassport = require('./config/setup-passport'); /* istanbul ignore next */var _setupPassport2 = _interopRequireDefault(_setupPassport);var /* istanbul ignore next */_models = require('./models'); /* istanbul ignore next */var _models2 = _interopRequireDefault(_models);var /* istanbul ignore next */_routes = require('./routes'); /* istanbul ignore next */var _routes2 = _interopRequireDefault(_routes);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}const isProduction = /* istanbul ignore next */(++cov_1a8usmab5.s[0], process.env.NODE_ENV === 'production'); /* istanbul ignore next */exports.default = start;