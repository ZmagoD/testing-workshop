'use strict';Object.defineProperty(exports, "__esModule", { value: true });let start = (() => {var _ref = _asyncToGenerator(
















  function* () {
    // Create global app object
    const app = (0, _express2.default)();

    app.use((0, _cors2.default)());

    // Normal express config defaults
    if (_loglevel2.default.getLevel() < 3) {
      app.use((0, _morgan2.default)('dev'));
    }
    app.use(_bodyParser2.default.urlencoded({ extended: false }));
    app.use(_bodyParser2.default.json());

    app.use((0, _methodOverride2.default)());
    app.use(_express2.default.static(`${__dirname}/public`));

    app.use(
    (0, _expressSession2.default)({
      secret: 'conduit',
      cookie: { maxAge: 60000 },
      resave: false,
      saveUninitialized: false }));



    if (!isProduction) {
      app.use((0, _errorhandler2.default)());
    }

    const cleanupMongoose = yield (0, _setupMongoose2.default)();
    (0, _models2.default)();
    (0, _setupPassport2.default)();

    app.use((0, _routes2.default)());

    /// catch 404 and forward to error handler
    app.use(function (req, res, next) {
      const err = new Error('Not Found');
      err.status = 404;
      next(err);
    });

    /// error handlers

    // development error handler
    // will print stacktrace
    if (!isProduction) {
      app.use(function (err, req, res) {
        _loglevel2.default.error(err.stack);

        res.status(err.status || 500);

        res.json({
          errors: {
            message: err.message,
            error: err } });


      });
    }

    // production error handler
    // no stacktraces leaked to user
    app.use(function (err, req, res) {
      _loglevel2.default.error(err.stack);

      res.status(err.status || 500);

      res.json({
        errors: {
          message: err.message,
          error: {} } });


    });

    // finally, let's start our server...
    return new Promise(function (resolve) {
      const server = app.listen(process.env.PORT || 3000, function () {
        _loglevel2.default.info(`Listening on port ${server.address().port}`);
        server.on('close', function () {
          cleanupMongoose();
        });
        resolve(server);
      });
    });
  });return function start() {return _ref.apply(this, arguments);};})();var _express = require('express');var _express2 = _interopRequireDefault(_express);var _bodyParser = require('body-parser');var _bodyParser2 = _interopRequireDefault(_bodyParser);var _expressSession = require('express-session');var _expressSession2 = _interopRequireDefault(_expressSession);var _cors = require('cors');var _cors2 = _interopRequireDefault(_cors);var _errorhandler = require('errorhandler');var _errorhandler2 = _interopRequireDefault(_errorhandler);var _morgan = require('morgan');var _morgan2 = _interopRequireDefault(_morgan);var _methodOverride = require('method-override');var _methodOverride2 = _interopRequireDefault(_methodOverride);var _loglevel = require('loglevel');var _loglevel2 = _interopRequireDefault(_loglevel);var _setupMongoose = require('./config/setup-mongoose');var _setupMongoose2 = _interopRequireDefault(_setupMongoose);var _setupPassport = require('./config/setup-passport');var _setupPassport2 = _interopRequireDefault(_setupPassport);var _models = require('./models');var _models2 = _interopRequireDefault(_models);var _routes = require('./routes');var _routes2 = _interopRequireDefault(_routes);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}const isProduction = process.env.NODE_ENV === 'production';exports.default = start;