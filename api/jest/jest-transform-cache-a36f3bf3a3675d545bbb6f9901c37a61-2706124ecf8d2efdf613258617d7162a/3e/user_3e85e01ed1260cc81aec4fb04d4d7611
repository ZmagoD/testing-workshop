/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var cov_4e1gq7ach = function () {var path = '/Users/zmagodevetak/Desktop/react/testing-workshop/api/src/models/user.js',hash = '6f9ffb28bf867797797379908520b13811d5738e',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/Users/zmagodevetak/Desktop/react/testing-workshop/api/src/models/user.js', statementMap: { '0': { start: { line: 10, column: 21 }, end: { line: 36, column: 3 } }, '1': { start: { line: 38, column: 2 }, end: { line: 38, column: 68 } }, '2': { start: { line: 40, column: 2 }, end: { line: 45, column: 3 } }, '3': { start: { line: 41, column: 17 }, end: { line: 43, column: 22 } }, '4': { start: { line: 44, column: 4 }, end: { line: 44, column: 29 } }, '5': { start: { line: 47, column: 2 }, end: { line: 52, column: 3 } }, '6': { start: { line: 48, column: 4 }, end: { line: 48, column: 54 } }, '7': { start: { line: 49, column: 4 }, end: { line: 51, column: 22 } }, '8': { start: { line: 54, column: 2 }, end: { line: 67, column: 3 } }, '9': { start: { line: 55, column: 18 }, end: { line: 55, column: 28 } }, '10': { start: { line: 56, column: 16 }, end: { line: 56, column: 31 } }, '11': { start: { line: 57, column: 4 }, end: { line: 57, column: 37 } }, '12': { start: { line: 59, column: 4 }, end: { line: 66, column: 5 } }, '13': { start: { line: 69, column: 2 }, end: { line: 77, column: 3 } }, '14': { start: { line: 70, column: 4 }, end: { line: 76, column: 5 } }, '15': { start: { line: 79, column: 2 }, end: { line: 88, column: 3 } }, '16': { start: { line: 80, column: 4 }, end: { line: 87, column: 5 } }, '17': { start: { line: 90, column: 2 }, end: { line: 96, column: 3 } }, '18': { start: { line: 91, column: 4 }, end: { line: 93, column: 5 } }, '19': { start: { line: 92, column: 6 }, end: { line: 92, column: 29 } }, '20': { start: { line: 95, column: 4 }, end: { line: 95, column: 22 } }, '21': { start: { line: 98, column: 2 }, end: { line: 101, column: 3 } }, '22': { start: { line: 99, column: 4 }, end: { line: 99, column: 29 } }, '23': { start: { line: 100, column: 4 }, end: { line: 100, column: 22 } }, '24': { start: { line: 103, column: 2 }, end: { line: 107, column: 3 } }, '25': { start: { line: 104, column: 4 }, end: { line: 106, column: 6 } }, '26': { start: { line: 105, column: 6 }, end: { line: 105, column: 52 } }, '27': { start: { line: 109, column: 2 }, end: { line: 115, column: 3 } }, '28': { start: { line: 110, column: 4 }, end: { line: 112, column: 5 } }, '29': { start: { line: 111, column: 6 }, end: { line: 111, column: 29 } }, '30': { start: { line: 114, column: 4 }, end: { line: 114, column: 22 } }, '31': { start: { line: 117, column: 2 }, end: { line: 120, column: 3 } }, '32': { start: { line: 118, column: 4 }, end: { line: 118, column: 29 } }, '33': { start: { line: 119, column: 4 }, end: { line: 119, column: 22 } }, '34': { start: { line: 122, column: 2 }, end: { line: 126, column: 3 } }, '35': { start: { line: 123, column: 4 }, end: { line: 125, column: 6 } }, '36': { start: { line: 124, column: 6 }, end: { line: 124, column: 50 } }, '37': { start: { line: 128, column: 2 }, end: { line: 128, column: 19 } } }, fnMap: { '0': { name: 'getUserSchema', decl: { start: { line: 9, column: 9 }, end: { line: 9, column: 22 } }, loc: { start: { line: 9, column: 25 }, end: { line: 129, column: 1 } } }, '1': { name: '(anonymous_1)', decl: { start: { line: 40, column: 37 }, end: { line: 40, column: 38 } }, loc: { start: { line: 40, column: 56 }, end: { line: 45, column: 3 } } }, '2': { name: '(anonymous_2)', decl: { start: { line: 47, column: 35 }, end: { line: 47, column: 36 } }, loc: { start: { line: 47, column: 54 }, end: { line: 52, column: 3 } } }, '3': { name: '(anonymous_3)', decl: { start: { line: 54, column: 35 }, end: { line: 54, column: 36 } }, loc: { start: { line: 54, column: 46 }, end: { line: 67, column: 3 } } }, '4': { name: '(anonymous_4)', decl: { start: { line: 69, column: 34 }, end: { line: 69, column: 35 } }, loc: { start: { line: 69, column: 45 }, end: { line: 77, column: 3 } } }, '5': { name: '(anonymous_5)', decl: { start: { line: 79, column: 40 }, end: { line: 79, column: 41 } }, loc: { start: { line: 79, column: 55 }, end: { line: 88, column: 3 } } }, '6': { name: '(anonymous_6)', decl: { start: { line: 90, column: 32 }, end: { line: 90, column: 33 } }, loc: { start: { line: 90, column: 45 }, end: { line: 96, column: 3 } } }, '7': { name: '(anonymous_7)', decl: { start: { line: 98, column: 34 }, end: { line: 98, column: 35 } }, loc: { start: { line: 98, column: 47 }, end: { line: 101, column: 3 } } }, '8': { name: '(anonymous_8)', decl: { start: { line: 103, column: 34 }, end: { line: 103, column: 35 } }, loc: { start: { line: 103, column: 47 }, end: { line: 107, column: 3 } } }, '9': { name: '(anonymous_9)', decl: { start: { line: 104, column: 31 }, end: { line: 104, column: 32 } }, loc: { start: { line: 104, column: 45 }, end: { line: 106, column: 5 } } }, '10': { name: '(anonymous_10)', decl: { start: { line: 109, column: 30 }, end: { line: 109, column: 31 } }, loc: { start: { line: 109, column: 43 }, end: { line: 115, column: 3 } } }, '11': { name: '(anonymous_11)', decl: { start: { line: 117, column: 32 }, end: { line: 117, column: 33 } }, loc: { start: { line: 117, column: 45 }, end: { line: 120, column: 3 } } }, '12': { name: '(anonymous_12)', decl: { start: { line: 122, column: 35 }, end: { line: 122, column: 36 } }, loc: { start: { line: 122, column: 48 }, end: { line: 126, column: 3 } } }, '13': { name: '(anonymous_13)', decl: { start: { line: 123, column: 31 }, end: { line: 123, column: 32 } }, loc: { start: { line: 123, column: 43 }, end: { line: 125, column: 5 } } } }, branchMap: { '0': { loc: { start: { line: 86, column: 17 }, end: { line: 86, column: 58 } }, type: 'cond-expr', locations: [{ start: { line: 86, column: 24 }, end: { line: 86, column: 50 } }, { start: { line: 86, column: 53 }, end: { line: 86, column: 58 } }] }, '1': { loc: { start: { line: 91, column: 4 }, end: { line: 93, column: 5 } }, type: 'if', locations: [{ start: { line: 91, column: 4 }, end: { line: 93, column: 5 } }, { start: { line: 91, column: 4 }, end: { line: 93, column: 5 } }] }, '2': { loc: { start: { line: 110, column: 4 }, end: { line: 112, column: 5 } }, type: 'if', locations: [{ start: { line: 110, column: 4 }, end: { line: 112, column: 5 } }, { start: { line: 110, column: 4 }, end: { line: 112, column: 5 } }] } }, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0, '13': 0, '14': 0, '15': 0, '16': 0, '17': 0, '18': 0, '19': 0, '20': 0, '21': 0, '22': 0, '23': 0, '24': 0, '25': 0, '26': 0, '27': 0, '28': 0, '29': 0, '30': 0, '31': 0, '32': 0, '33': 0, '34': 0, '35': 0, '36': 0, '37': 0 }, f: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0, '13': 0 }, b: { '0': [0, 0], '1': [0, 0], '2': [0, 0] }, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();var /* istanbul ignore next */_crypto = require('crypto'); /* istanbul ignore next */var _crypto2 = _interopRequireDefault(_crypto);
var /* istanbul ignore next */_mongoose = require('mongoose'); /* istanbul ignore next */var _mongoose2 = _interopRequireDefault(_mongoose);
var /* istanbul ignore next */_mongooseUniqueValidator = require('mongoose-unique-validator'); /* istanbul ignore next */var _mongooseUniqueValidator2 = _interopRequireDefault(_mongooseUniqueValidator);
var /* istanbul ignore next */_jsonwebtoken = require('jsonwebtoken'); /* istanbul ignore next */var _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);
var /* istanbul ignore next */_config = require('../config'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}exports.default =

getUserSchema;

function getUserSchema() {/* istanbul ignore next */++cov_4e1gq7ach.f[0];
  const UserSchema = /* istanbul ignore next */(++cov_4e1gq7ach.s[0], new /* istanbul ignore next */_mongoose2.default.Schema(
  {
    username: {
      type: String,
      lowercase: true,
      unique: true,
      required: [true, `can't be blank`],
      match: [/^[a-zA-Z0-9]+$/, 'is invalid'],
      index: true },

    email: {
      type: String,
      lowercase: true,
      unique: true,
      required: [true, `can't be blank`],
      match: [/\S+@\S+\.\S+/, 'is invalid'],
      index: true },

    bio: String,
    image: String,
    favorites: [{ type: /* istanbul ignore next */_mongoose2.default.Schema.Types.ObjectId, ref: 'Article' }],
    following: [{ type: /* istanbul ignore next */_mongoose2.default.Schema.Types.ObjectId, ref: 'User' }],
    hash: String,
    salt: String },

  { timestamps: true })); /* istanbul ignore next */++cov_4e1gq7ach.s[1];


  UserSchema.plugin( /* istanbul ignore next */_mongooseUniqueValidator2.default, { message: 'is already taken.' }); /* istanbul ignore next */++cov_4e1gq7ach.s[2];

  UserSchema.methods.validPassword = function (password) {/* istanbul ignore next */++cov_4e1gq7ach.f[1];
    const hash = /* istanbul ignore next */(++cov_4e1gq7ach.s[3], /* istanbul ignore next */_crypto2.default.
    pbkdf2Sync(password, this.salt, 10000, 512, 'sha512').
    toString('hex')); /* istanbul ignore next */++cov_4e1gq7ach.s[4];
    return this.hash === hash;
  }; /* istanbul ignore next */++cov_4e1gq7ach.s[5];

  UserSchema.methods.setPassword = function (password) {/* istanbul ignore next */++cov_4e1gq7ach.f[2];++cov_4e1gq7ach.s[6];
    this.salt = /* istanbul ignore next */_crypto2.default.randomBytes(16).toString('hex'); /* istanbul ignore next */++cov_4e1gq7ach.s[7];
    this.hash = /* istanbul ignore next */_crypto2.default.
    pbkdf2Sync(password, this.salt, 10000, 512, 'sha512').
    toString('hex');
  }; /* istanbul ignore next */++cov_4e1gq7ach.s[8];

  UserSchema.methods.generateJWT = function () {/* istanbul ignore next */++cov_4e1gq7ach.f[3];
    const today = /* istanbul ignore next */(++cov_4e1gq7ach.s[9], new Date());
    const exp = /* istanbul ignore next */(++cov_4e1gq7ach.s[10], new Date(today)); /* istanbul ignore next */++cov_4e1gq7ach.s[11];
    exp.setDate(today.getDate() + 60); /* istanbul ignore next */++cov_4e1gq7ach.s[12];

    return (/* istanbul ignore next */_jsonwebtoken2.default.sign(
      {
        id: this._id,
        username: this.username,
        exp: parseInt(exp.getTime() / 1000, 10) }, /* istanbul ignore next */_config.secret));



  }; /* istanbul ignore next */++cov_4e1gq7ach.s[13];

  UserSchema.methods.toAuthJSON = function () {/* istanbul ignore next */++cov_4e1gq7ach.f[4];++cov_4e1gq7ach.s[14];
    return {
      username: this.username,
      email: this.email,
      bio: this.bio,
      token: this.generateJWT(),
      image: this.image };

  }; /* istanbul ignore next */++cov_4e1gq7ach.s[15];

  UserSchema.methods.toProfileJSONFor = function (user) {/* istanbul ignore next */++cov_4e1gq7ach.f[5];++cov_4e1gq7ach.s[16];
    return {
      username: this.username,
      bio: this.bio,
      // this is where the bug is...
      // we're not adding this.image
      // to the object!
      following: user ? /* istanbul ignore next */(++cov_4e1gq7ach.b[0][0], user.isFollowing(this._id)) : /* istanbul ignore next */(++cov_4e1gq7ach.b[0][1], false) };

  }; /* istanbul ignore next */++cov_4e1gq7ach.s[17];

  UserSchema.methods.favorite = function (id) {/* istanbul ignore next */++cov_4e1gq7ach.f[6];++cov_4e1gq7ach.s[18];
    if (this.favorites.indexOf(id) === -1) {/* istanbul ignore next */++cov_4e1gq7ach.b[1][0];++cov_4e1gq7ach.s[19];
      this.favorites.push(id);
    } else /* istanbul ignore next */{++cov_4e1gq7ach.b[1][1];}++cov_4e1gq7ach.s[20];

    return this.save();
  }; /* istanbul ignore next */++cov_4e1gq7ach.s[21];

  UserSchema.methods.unfavorite = function (id) {/* istanbul ignore next */++cov_4e1gq7ach.f[7];++cov_4e1gq7ach.s[22];
    this.favorites.remove(id); /* istanbul ignore next */++cov_4e1gq7ach.s[23];
    return this.save();
  }; /* istanbul ignore next */++cov_4e1gq7ach.s[24];

  UserSchema.methods.isFavorite = function (id) {/* istanbul ignore next */++cov_4e1gq7ach.f[8];++cov_4e1gq7ach.s[25];
    return this.favorites.some(favoriteId => {/* istanbul ignore next */++cov_4e1gq7ach.f[9];++cov_4e1gq7ach.s[26];
      return favoriteId.toString() === id.toString();
    });
  }; /* istanbul ignore next */++cov_4e1gq7ach.s[27];

  UserSchema.methods.follow = function (id) {/* istanbul ignore next */++cov_4e1gq7ach.f[10];++cov_4e1gq7ach.s[28];
    if (this.following.indexOf(id) === -1) {/* istanbul ignore next */++cov_4e1gq7ach.b[2][0];++cov_4e1gq7ach.s[29];
      this.following.push(id);
    } else /* istanbul ignore next */{++cov_4e1gq7ach.b[2][1];}++cov_4e1gq7ach.s[30];

    return this.save();
  }; /* istanbul ignore next */++cov_4e1gq7ach.s[31];

  UserSchema.methods.unfollow = function (id) {/* istanbul ignore next */++cov_4e1gq7ach.f[11];++cov_4e1gq7ach.s[32];
    this.following.remove(id); /* istanbul ignore next */++cov_4e1gq7ach.s[33];
    return this.save();
  }; /* istanbul ignore next */++cov_4e1gq7ach.s[34];

  UserSchema.methods.isFollowing = function (id) {/* istanbul ignore next */++cov_4e1gq7ach.f[12];++cov_4e1gq7ach.s[35];
    return this.following.some(followId => {/* istanbul ignore next */++cov_4e1gq7ach.f[13];++cov_4e1gq7ach.s[36];
      return followId.toString() === id.toString();
    });
  }; /* istanbul ignore next */++cov_4e1gq7ach.s[37];

  return UserSchema;
}