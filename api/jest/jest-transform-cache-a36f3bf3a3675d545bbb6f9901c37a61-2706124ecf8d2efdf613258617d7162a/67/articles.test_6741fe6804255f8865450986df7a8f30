'use strict';





































//////////////////////
// ðŸ‘‹ Put your tests here
///////////////////////

// I've left this here for you as a little utility that's a little
// domain-specific and isn't super pertinent to learning testing :)
// Just know that utilities like this are pretty darn useful and you
// should probably have things like this in your tests :)
let createNewUser = (() => {var _ref = _asyncToGenerator(function* (overrides) {
    const password = _faker2.default.internet.password();
    const userData = (0, _user2.default)(overrides);const
    email = userData.email,username = userData.username;
    const user = yield api.
    post('users', { user: { email, password, username } }).
    then(getUser);
    return {
      user,
      cleanup() {
        return api.delete(`users/${user.username}`);
      } };

  });return function createNewUser(_x) {return _ref.apply(this, arguments);};})();


//////// Elaboration & Feedback /////////
/*
http://ws.kcd.im/?ws=Testing&e=API%20Integration&em=zmago_devetak@yahoo.com*/var _axios = require('axios');var _axios2 = _interopRequireDefault(_axios);var _faker = require('faker');var _faker2 = _interopRequireDefault(_faker);var _article = require('../../../other/generate/article');var _user = require('../../../other/generate/user');var _user2 = _interopRequireDefault(_user);var _startServer = require('../../src/start-server');var _startServer2 = _interopRequireDefault(_startServer);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};} // you're going to need to start the server before all the tests
// start and close the server after all the tests are finished.
// startServer is a function that returns a promise which resolves
// to the server object. The server object has a `close` function
// which accepts a callback. Kinda wonky, I know... But you should
// learn how to use both async styles with these tests so I left it
// like that :)
// I'm going to give you this just so you don't have to look it up:
const api = _axios2.default.create({ baseURL: 'http://localhost:3000/api' }); // Note also that the articles endpoints are at: api/articles
// So to get articles, you can do: api.get('articles') which
// will return a promise that resolves to the response from the
// request.
//
// From here you're pretty much on your own.
// To come up with what to test, try to think of
// the use cases you want to support. Start with
// the unauthenticated stuff.
//
// If you want to do authenticated endpoints,
// you'll need to call createNewUser, and use the
// token you get back like this:
// api.defaults.headers.common.authorization = `Token ${token}`
// then the api is authenticated
// just a handy utility for some of our promise-based code
// you might consider making something similar for the articles
// stuff
const getUser = res => res.data.user;test.skip('I submitted my elaboration and feedback', () => {const submitted = false; // change this when you've submitted!
  expect(true).toBe(submitted);}); ////////////////////////////////
//////// EXTRA CREDIT ////////
// If you get this far, try adding a few more tests,
// then file a pull request to add them as extra credit!
// Learn more here: http://kcd.im/testing-workshop-contributing