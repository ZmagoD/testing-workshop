/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var cov_1du1oalh6p = function () {var path = '/Users/zmagodevetak/Desktop/react/testing-workshop/api/src/routes/api/profiles.js',hash = '90e309add99c2054222d647cb6af041ab11cd8e2',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/Users/zmagodevetak/Desktop/react/testing-workshop/api/src/routes/api/profiles.js', statementMap: { '0': { start: { line: 8, column: 17 }, end: { line: 8, column: 33 } }, '1': { start: { line: 9, column: 15 }, end: { line: 9, column: 37 } }, '2': { start: { line: 12, column: 2 }, end: { line: 24, column: 4 } }, '3': { start: { line: 13, column: 4 }, end: { line: 23, column: 18 } }, '4': { start: { line: 15, column: 8 }, end: { line: 17, column: 9 } }, '5': { start: { line: 16, column: 10 }, end: { line: 16, column: 36 } }, '6': { start: { line: 19, column: 8 }, end: { line: 19, column: 26 } }, '7': { start: { line: 21, column: 8 }, end: { line: 21, column: 21 } }, '8': { start: { line: 26, column: 2 }, end: { line: 38, column: 4 } }, '9': { start: { line: 27, column: 4 }, end: { line: 37, column: 5 } }, '10': { start: { line: 28, column: 6 }, end: { line: 34, column: 8 } }, '11': { start: { line: 29, column: 8 }, end: { line: 31, column: 9 } }, '12': { start: { line: 30, column: 10 }, end: { line: 30, column: 73 } }, '13': { start: { line: 33, column: 8 }, end: { line: 33, column: 70 } }, '14': { start: { line: 36, column: 6 }, end: { line: 36, column: 69 } }, '15': { start: { line: 40, column: 2 }, end: { line: 54, column: 4 } }, '16': { start: { line: 41, column: 22 }, end: { line: 41, column: 37 } }, '17': { start: { line: 43, column: 4 }, end: { line: 53, column: 18 } }, '18': { start: { line: 45, column: 8 }, end: { line: 47, column: 9 } }, '19': { start: { line: 46, column: 10 }, end: { line: 46, column: 36 } }, '20': { start: { line: 49, column: 8 }, end: { line: 51, column: 10 } }, '21': { start: { line: 50, column: 10 }, end: { line: 50, column: 72 } }, '22': { start: { line: 56, column: 2 }, end: { line: 70, column: 4 } }, '23': { start: { line: 57, column: 22 }, end: { line: 57, column: 37 } }, '24': { start: { line: 59, column: 4 }, end: { line: 69, column: 18 } }, '25': { start: { line: 61, column: 8 }, end: { line: 63, column: 9 } }, '26': { start: { line: 62, column: 10 }, end: { line: 62, column: 36 } }, '27': { start: { line: 65, column: 8 }, end: { line: 67, column: 10 } }, '28': { start: { line: 66, column: 10 }, end: { line: 66, column: 72 } }, '29': { start: { line: 72, column: 2 }, end: { line: 72, column: 15 } } }, fnMap: { '0': { name: 'getProfilesRouter', decl: { start: { line: 7, column: 9 }, end: { line: 7, column: 26 } }, loc: { start: { line: 7, column: 29 }, end: { line: 73, column: 1 } } }, '1': { name: '(anonymous_1)', decl: { start: { line: 12, column: 27 }, end: { line: 12, column: 28 } }, loc: { start: { line: 12, column: 57 }, end: { line: 24, column: 3 } } }, '2': { name: '(anonymous_2)', decl: { start: { line: 14, column: 12 }, end: { line: 14, column: 13 } }, loc: { start: { line: 14, column: 20 }, end: { line: 22, column: 7 } } }, '3': { name: '(anonymous_3)', decl: { start: { line: 26, column: 42 }, end: { line: 26, column: 43 } }, loc: { start: { line: 26, column: 56 }, end: { line: 38, column: 3 } } }, '4': { name: '(anonymous_4)', decl: { start: { line: 28, column: 41 }, end: { line: 28, column: 42 } }, loc: { start: { line: 28, column: 49 }, end: { line: 34, column: 7 } } }, '5': { name: '(anonymous_5)', decl: { start: { line: 40, column: 50 }, end: { line: 40, column: 51 } }, loc: { start: { line: 40, column: 70 }, end: { line: 54, column: 3 } } }, '6': { name: '(anonymous_6)', decl: { start: { line: 44, column: 12 }, end: { line: 44, column: 13 } }, loc: { start: { line: 44, column: 20 }, end: { line: 52, column: 7 } } }, '7': { name: '(anonymous_7)', decl: { start: { line: 49, column: 43 }, end: { line: 49, column: 44 } }, loc: { start: { line: 49, column: 49 }, end: { line: 51, column: 9 } } }, '8': { name: '(anonymous_8)', decl: { start: { line: 56, column: 52 }, end: { line: 56, column: 53 } }, loc: { start: { line: 56, column: 72 }, end: { line: 70, column: 3 } } }, '9': { name: '(anonymous_9)', decl: { start: { line: 60, column: 12 }, end: { line: 60, column: 13 } }, loc: { start: { line: 60, column: 20 }, end: { line: 68, column: 7 } } }, '10': { name: '(anonymous_10)', decl: { start: { line: 65, column: 45 }, end: { line: 65, column: 46 } }, loc: { start: { line: 65, column: 51 }, end: { line: 67, column: 9 } } } }, branchMap: { '0': { loc: { start: { line: 15, column: 8 }, end: { line: 17, column: 9 } }, type: 'if', locations: [{ start: { line: 15, column: 8 }, end: { line: 17, column: 9 } }, { start: { line: 15, column: 8 }, end: { line: 17, column: 9 } }] }, '1': { loc: { start: { line: 27, column: 4 }, end: { line: 37, column: 5 } }, type: 'if', locations: [{ start: { line: 27, column: 4 }, end: { line: 37, column: 5 } }, { start: { line: 27, column: 4 }, end: { line: 37, column: 5 } }] }, '2': { loc: { start: { line: 29, column: 8 }, end: { line: 31, column: 9 } }, type: 'if', locations: [{ start: { line: 29, column: 8 }, end: { line: 31, column: 9 } }, { start: { line: 29, column: 8 }, end: { line: 31, column: 9 } }] }, '3': { loc: { start: { line: 45, column: 8 }, end: { line: 47, column: 9 } }, type: 'if', locations: [{ start: { line: 45, column: 8 }, end: { line: 47, column: 9 } }, { start: { line: 45, column: 8 }, end: { line: 47, column: 9 } }] }, '4': { loc: { start: { line: 61, column: 8 }, end: { line: 63, column: 9 } }, type: 'if', locations: [{ start: { line: 61, column: 8 }, end: { line: 63, column: 9 } }, { start: { line: 61, column: 8 }, end: { line: 63, column: 9 } }] } }, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0, '13': 0, '14': 0, '15': 0, '16': 0, '17': 0, '18': 0, '19': 0, '20': 0, '21': 0, '22': 0, '23': 0, '24': 0, '25': 0, '26': 0, '27': 0, '28': 0, '29': 0 }, f: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0 }, b: { '0': [0, 0], '1': [0, 0], '2': [0, 0], '3': [0, 0], '4': [0, 0] }, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();var /* istanbul ignore next */_express = require('express'); /* istanbul ignore next */var _express2 = _interopRequireDefault(_express);
var /* istanbul ignore next */_mongoose = require('mongoose'); /* istanbul ignore next */var _mongoose2 = _interopRequireDefault(_mongoose);
var /* istanbul ignore next */_auth = require('../auth'); /* istanbul ignore next */var _auth2 = _interopRequireDefault(_auth);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}exports.default =

getProfilesRouter;

function getProfilesRouter() {/* istanbul ignore next */++cov_1du1oalh6p.f[0];
  const router = /* istanbul ignore next */(++cov_1du1oalh6p.s[0], /* istanbul ignore next */_express2.default.Router());
  const User = /* istanbul ignore next */(++cov_1du1oalh6p.s[1], /* istanbul ignore next */_mongoose2.default.model('User'));

  // Preload article objects on routes with ':username'
  /* istanbul ignore next */++cov_1du1oalh6p.s[2];router.param('username', (req, res, next, username) => {/* istanbul ignore next */++cov_1du1oalh6p.f[1];++cov_1du1oalh6p.s[3];
    User.findOne({ username }).
    then(user => {/* istanbul ignore next */++cov_1du1oalh6p.f[2];++cov_1du1oalh6p.s[4];
      if (!user) {/* istanbul ignore next */++cov_1du1oalh6p.b[0][0];++cov_1du1oalh6p.s[5];
        return res.sendStatus(404);
      } else /* istanbul ignore next */{++cov_1du1oalh6p.b[0][1];}++cov_1du1oalh6p.s[6];

      req.profile = user; /* istanbul ignore next */++cov_1du1oalh6p.s[7];

      return next();
    }).
    catch(next);
  }); /* istanbul ignore next */++cov_1du1oalh6p.s[8];

  router.get('/:username', /* istanbul ignore next */_auth2.default.optional, (req, res) => {/* istanbul ignore next */++cov_1du1oalh6p.f[3];++cov_1du1oalh6p.s[9];
    if (req.payload) {/* istanbul ignore next */++cov_1du1oalh6p.b[1][0];++cov_1du1oalh6p.s[10];
      User.findById(req.payload.id).then(user => {/* istanbul ignore next */++cov_1du1oalh6p.f[4];++cov_1du1oalh6p.s[11];
        if (!user) {/* istanbul ignore next */++cov_1du1oalh6p.b[2][0];++cov_1du1oalh6p.s[12];
          return res.json({ profile: req.profile.toProfileJSONFor(false) });
        } else /* istanbul ignore next */{++cov_1du1oalh6p.b[2][1];}++cov_1du1oalh6p.s[13];

        return res.json({ profile: req.profile.toProfileJSONFor(user) });
      });
    } else {/* istanbul ignore next */++cov_1du1oalh6p.b[1][1];++cov_1du1oalh6p.s[14];
      return res.json({ profile: req.profile.toProfileJSONFor(false) });
    }
  }); /* istanbul ignore next */++cov_1du1oalh6p.s[15];

  router.post('/:username/follow', /* istanbul ignore next */_auth2.default.required, (req, res, next) => {/* istanbul ignore next */++cov_1du1oalh6p.f[5];
    const profileId = /* istanbul ignore next */(++cov_1du1oalh6p.s[16], req.profile._id); /* istanbul ignore next */++cov_1du1oalh6p.s[17];

    User.findById(req.payload.id).
    then(user => {/* istanbul ignore next */++cov_1du1oalh6p.f[6];++cov_1du1oalh6p.s[18];
      if (!user) {/* istanbul ignore next */++cov_1du1oalh6p.b[3][0];++cov_1du1oalh6p.s[19];
        return res.sendStatus(401);
      } else /* istanbul ignore next */{++cov_1du1oalh6p.b[3][1];}++cov_1du1oalh6p.s[20];

      return user.follow(profileId).then(() => {/* istanbul ignore next */++cov_1du1oalh6p.f[7];++cov_1du1oalh6p.s[21];
        return res.json({ profile: req.profile.toProfileJSONFor(user) });
      });
    }).
    catch(next);
  }); /* istanbul ignore next */++cov_1du1oalh6p.s[22];

  router.delete('/:username/follow', /* istanbul ignore next */_auth2.default.required, (req, res, next) => {/* istanbul ignore next */++cov_1du1oalh6p.f[8];
    const profileId = /* istanbul ignore next */(++cov_1du1oalh6p.s[23], req.profile._id); /* istanbul ignore next */++cov_1du1oalh6p.s[24];

    User.findById(req.payload.id).
    then(user => {/* istanbul ignore next */++cov_1du1oalh6p.f[9];++cov_1du1oalh6p.s[25];
      if (!user) {/* istanbul ignore next */++cov_1du1oalh6p.b[4][0];++cov_1du1oalh6p.s[26];
        return res.sendStatus(401);
      } else /* istanbul ignore next */{++cov_1du1oalh6p.b[4][1];}++cov_1du1oalh6p.s[27];

      return user.unfollow(profileId).then(() => {/* istanbul ignore next */++cov_1du1oalh6p.f[10];++cov_1du1oalh6p.s[28];
        return res.json({ profile: req.profile.toProfileJSONFor(user) });
      });
    }).
    catch(next);
  }); /* istanbul ignore next */++cov_1du1oalh6p.s[29];

  return router;
}