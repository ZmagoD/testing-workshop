'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _crypto = require('crypto');var _crypto2 = _interopRequireDefault(_crypto);
var _mongoose = require('mongoose');var _mongoose2 = _interopRequireDefault(_mongoose);
var _mongooseUniqueValidator = require('mongoose-unique-validator');var _mongooseUniqueValidator2 = _interopRequireDefault(_mongooseUniqueValidator);
var _jsonwebtoken = require('jsonwebtoken');var _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);
var _config = require('../config');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}exports.default =

getUserSchema;

function getUserSchema() {
  const UserSchema = new _mongoose2.default.Schema(
  {
    username: {
      type: String,
      lowercase: true,
      unique: true,
      required: [true, `can't be blank`],
      match: [/^[a-zA-Z0-9]+$/, 'is invalid'],
      index: true },

    email: {
      type: String,
      lowercase: true,
      unique: true,
      required: [true, `can't be blank`],
      match: [/\S+@\S+\.\S+/, 'is invalid'],
      index: true },

    bio: String,
    image: String,
    favorites: [{ type: _mongoose2.default.Schema.Types.ObjectId, ref: 'Article' }],
    following: [{ type: _mongoose2.default.Schema.Types.ObjectId, ref: 'User' }],
    hash: String,
    salt: String },

  { timestamps: true });


  UserSchema.plugin(_mongooseUniqueValidator2.default, { message: 'is already taken.' });

  UserSchema.methods.validPassword = function (password) {
    const hash = _crypto2.default.
    pbkdf2Sync(password, this.salt, 10000, 512, 'sha512').
    toString('hex');
    return this.hash === hash;
  };

  UserSchema.methods.setPassword = function (password) {
    this.salt = _crypto2.default.randomBytes(16).toString('hex');
    this.hash = _crypto2.default.
    pbkdf2Sync(password, this.salt, 10000, 512, 'sha512').
    toString('hex');
  };

  UserSchema.methods.generateJWT = function () {
    const today = new Date();
    const exp = new Date(today);
    exp.setDate(today.getDate() + 60);

    return _jsonwebtoken2.default.sign(
    {
      id: this._id,
      username: this.username,
      exp: parseInt(exp.getTime() / 1000, 10) }, _config.secret);



  };

  UserSchema.methods.toAuthJSON = function () {
    return {
      username: this.username,
      email: this.email,
      bio: this.bio,
      token: this.generateJWT(),
      image: this.image };

  };

  UserSchema.methods.toProfileJSONFor = function (user) {
    return {
      username: this.username,
      bio: this.bio,
      image: this.image,
      following: user ? user.isFollowing(this._id) : false };

  };

  UserSchema.methods.favorite = function (id) {
    if (this.favorites.indexOf(id) === -1) {
      this.favorites.push(id);
    }

    return this.save();
  };

  UserSchema.methods.unfavorite = function (id) {
    this.favorites.remove(id);
    return this.save();
  };

  UserSchema.methods.isFavorite = function (id) {
    return this.favorites.some(favoriteId => {
      return favoriteId.toString() === id.toString();
    });
  };

  UserSchema.methods.follow = function (id) {
    if (this.following.indexOf(id) === -1) {
      this.following.push(id);
    }

    return this.save();
  };

  UserSchema.methods.unfollow = function (id) {
    this.following.remove(id);
    return this.save();
  };

  UserSchema.methods.isFollowing = function (id) {
    return this.following.some(followId => {
      return followId.toString() === id.toString();
    });
  };

  return UserSchema;
}