'use strict';var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _axios = require('axios');var _axios2 = _interopRequireDefault(_axios);
var _faker = require('faker');var _faker2 = _interopRequireDefault(_faker);
var _startServer = require('../start-server');var _startServer2 = _interopRequireDefault(_startServer);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}

const api = _axios2.default.create({
  baseURL: 'http://localhost:3001/api' });


let server;

beforeAll(_asyncToGenerator(function* () {
  server = yield (0, _startServer2.default)();
}));

afterAll(done => {
  server.close(done);
});

describe('unauthorized', () => {
  test('can limit the users', _asyncToGenerator(function* () {
    const users = yield api.get('users?limit=10').then(function (r) {return r.data.users;});
    expect(users).toHaveLength(10);
  }));

  test('can get users with an offset', _asyncToGenerator(function* () {var _ref4 =
    yield api.
    get('users?offset=0&limit=2').
    then(function (r) {return r.data.users;}),_ref5 = _slicedToArray(_ref4, 2);const user1 = _ref5[1];var _ref6 =
    yield api.
    get('users?offset=1&limit=1').
    then(function (r) {return r.data.users;}),_ref7 = _slicedToArray(_ref6, 1);const user2 = _ref7[0];
    expect(user1).toEqual(user2);
  }));

  test('cannot add a user', _asyncToGenerator(function* () {
    const response = yield api.post('users', {}).catch(function (error) {return error.response;});
    expect(response.status).toBe(401);
  }));
});

describe('authorized', () => {
  beforeAll(_asyncToGenerator(function* () {
    const currentUser = yield api.
    post('auth', {
      username: 'jane',
      password: 'I have a secure password' }).

    then(function (r) {return r.data.user;});
    api.defaults.headers.common.authorization = `Token ${currentUser.token}`;
  }));

  afterAll(() => {
    api.defaults.headers.common.authorization = '';
  });

  test('can add a user', _asyncToGenerator(function* () {
    const user = generateRandomUserData();
    const result = yield api.post('users', { user }).then(function (r) {return r.data.user;});
    expect(result).toEqual(user);
    const getResult = yield api.
    get(`users/${user.username}`).
    then(function (r) {return r.data.user;});
    expect(getResult).toEqual(user);
  }));

  test('can delete a user', _asyncToGenerator(function* () {
    const user = generateRandomUserData();
    yield api.post('users', { user });
    yield api.delete(`users/${user.username}`);

    const result = yield api.
    get(`users/${user.username}`).
    catch(function (error) {return error.response;});
    expect(result.status).toBe(404);
  }));
});

/**
     * This makes all the types primitive
     * @return {Object} the random user
     */
function generateRandomUserData() {
  return JSON.parse(JSON.stringify(_faker2.default.helpers.contextualCard()));
}